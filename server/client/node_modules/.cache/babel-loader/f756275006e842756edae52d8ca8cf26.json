{"ast":null,"code":"import _defineProperty from \"/home/subhro/Desktop/WebProjects/Blogpost/client/blogpost-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_POST, NEW_POST } from '../actions/types';\nconst initialState = {\n  items: [],\n  item: {}\n};\nexport default function (state = initialState, action) {\n  switch (action) {\n    case FETCH_POST:\n      console.log(action.payload);\n      return _objectSpread({}, state, {\n        items: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/subhro/Desktop/WebProjects/Blogpost/client/blogpost-frontend/src/reducers/postReducer.js"],"names":["FETCH_POST","NEW_POST","initialState","items","item","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,kBAArC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB;AAKA,eAAe,UAASC,KAAK,GAAGH,YAAjB,EAA+BI,MAA/B,EAAuC;AAClD,UAAOA,MAAP;AACI,SAAKN,UAAL;AACIO,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACA,+BACOJ,KADP;AAEIF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFlB;;AAIJ;AAAS,aAAOJ,KAAP;AAPb;AASH","sourcesContent":["import { FETCH_POST, NEW_POST } from '../actions/types';    \n\nconst initialState = {\n    items: [],\n    item: {}\n}\n\nexport default function(state = initialState, action) {\n    switch(action) {\n        case FETCH_POST:\n            console.log(action.payload)\n            return {\n                ...state,\n                items: action.payload\n            };\n        default: return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}